/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * This file is part of SableCC.                             *
 * See the file "LICENSE" for copyright information and the  *
 * terms and conditions for copying, distribution and        *
 * modification of SableCC.                                  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Macro:AnalysisHeader
/* This file was generated by AbstractCC. */

package $0$;

import $1$.*;

public interface Visitor
{

$
Macro:AnalysisStart

$

Macro:AnalysisBody
    void case$0$($0$ node);

$

Macro:AnalysisTail
}

$

Macro:AnalysisAdapterHeader
/* This file was generated by AbstractCC. */

package $0$;

import java.util.*;
import $1$.*;
import asf.astgraph.*;

@SuppressWarnings("all")
public class AbstractVisitor implements Visitor
{

$

Macro:AnalysisAdapterStart

$

Macro:AnalysisAdapterBody

    public void case$0$($0$ node)
    {
        defaultCase(node);
    }

$

Macro:AnalysisAdapterTail

    public void defaultCase(Node<?> node)
    {
        // do nothing
    }
}

$

Macro:DepthFirstAdapterHeader
/* This file was generated by AbstractCC. */

package $0$;

import java.util.*;
import $1$.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.get$2$().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

$

Macro:ReversedDepthFirstAdapterHeader
/* This file was generated by AbstractCC. */

package $0$;

import java.util.*;
import $1$.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.get$2$().apply(this);
        outStart(node);
    }

$

Macro:DepthFirstAdapterInOut

    public void in$0$($0$ node)
    {
        defaultIn(node);
    }

    public void out$0$($0$ node)
    {
        defaultOut(node);
    }

$

Macro:DepthFirstAdapterCaseHeader

    @Override
    public void case$0$($0$ node)
    {
        in$0$(node);

$

Macro:DepthFirstAdapterCaseBodyNode
        if(node.get$0$() != null)
        {
            node.get$0$().apply(this);
        }

$

Macro:DepthFirstAdapterCaseBodyList
        {
            List<$1$> copy = new ArrayList<$1$>(node.get$0$());
            for($1$ e : copy)
            {
                e.apply(this);
            }
        }

$

Macro:ReversedDepthFirstAdapterCaseBodyList
        {
            List<$1$> copy = new ArrayList<$1$>(node.get$0$());
            Collections.reverse(copy);
            for($1$ e : copy)
            {
                e.apply(this);
            }
        }

$

Macro:DepthFirstAdapterCaseTail
        out$0$(node);
    }

$

Macro:DepthFirstAdapterTail
}

$
