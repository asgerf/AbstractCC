/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * This file is part of SableCC.                             *
 * See the file "LICENSE" for copyright information and the  *
 * terms and conditions for copying, distribution and        *
 * modification of SableCC.                                  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Macro:ParserHeader
/* This file was generated by AbstractCC. */

package $0$;

import $1$.*;
import $2$.*;
import $3$.*;
import java.util.*;

import asf.astgraph.*;
import asf.grammarinfo.*;
import asf.automaton.combinator.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("all")
public class Parser implements GrammarInfo
{
	public Production[] getProductions() {
		return PRODUCTIONS;
	}
	public Nonterminal[] getNonterminals() {
		return NONTERMINALS;
	}
	
	public Set<Integer> getIgnoredTokenIds() {
		return IGNORED_TOKENS;
	}
	
	public TokenDef getTokenWithLexerId(int lexerId) {
		return TOKEN_DEFINITIONS[lexerId];
	}
	public TokenDef getTokenWithParserId(int parserId) {
		return TOKEN_DEFINITIONS[PARSER_TO_LEXER_ALPHABET[parserId]];
	}
	
	public TokenDef getEOFToken() {
		return EOF_TOKEN;
	}
	
	public Token createToken(int tokenId, CombinatorNode node) {
		Token tok = new TokenIndex().makeToken(tokenId);
		tok.setText(node);
		return tok;
	}
	
	private INode concat(INode first, INode second) {
		if (first instanceof EmptySequenceNode)
			return second;
		else if (second instanceof EmptySequenceNode)
			return first;
		else
			return new ConcatNode(first,second);
	}


$

Macro:ProductionInfoHead
$

Macro:ProductionInfo
$

Macro:ProductionInfoTail
$

Macro:ParserInliningPushHeader
$

Macro:ParserNoInliningPushHeader
$

Macro:ParserCommon
$

Macro:ParserInliningReduce
$

Macro:ParserNoInliningReduce
$

Macro:MakeAlternativeHead

	public ArrayList<INode> transformProduction(int alt, ArrayList<ArrayList<ChoiceNode>> stack) {
		ArrayList<INode> nodeList = new ArrayList<INode>();
		switch (alt) {

$

Macro:MakeAlternativeTail
		default:
			throw new RuntimeException("Invalid alternative ID: " + alt);
		}
		return nodeList;
	}
$

Macro:MakeAlternativeCase
		case $0$: {

$

Macro:ParserNewBodyDecl
        	ArrayList<ChoiceNode> nodeArrayList$0$ = stack.get($0$ - 1);

$

Macro:ParserNewBodyDeclNull
        	ArrayList<INode> nodeArrayList$0$ = null;

$

Macro:ParserBraceOpening
        	{
        	    // Block

$

Macro:ParserBraceClosing
        	}

$

Macro:ParserSimpleVariableDeclaration
        	INode $1$Node$2$;

$

Macro:ParserListVariableDeclaration
        	INode listNode$0$ = new EmptySequenceNode();

$

Macro:ParserNullVariableDeclaration
        	Object nullNode$0$ = null;

$

Macro:ParserSimpleTerm
        	$0$Node$1$ = ($2$)nodeArrayList$3$.get($4$);

$

Macro:ParserNewBodyNew

        	$0$Node$1$ = new $2$(
$

Macro:ParserNew&ListBodyParams
$0$Node$1$
$

Macro:ParserNew&ListBodyParamsNull
$0$
$

Macro:ParserNewBodyNewTail
);

$

Macro:ParserTypedLinkedListAdd
	    	$0$Node$1$ = new SingletonSequenceNode($2$Node$3$);

$

Macro:ParserTypedLinkedListAddAll
	    	$0$Node$1$ = concat($0$Node$1$, $2$Node$3$);

$

Macro:ParserTypedLinkedListAddAll2
	    	$0$Node$1$ = $2$Node$3$;

$

Macro:ParserNewBodyListAdd
	    	nodeList.add($0$Node$1$);

$

Macro:ParserNewTail
        	break;
        }

$

Macro:ParserActionHeader
$

Macro:ParserActionTail
$

Macro:ParserGotoHeader
$

Macro:ParserGotoTail
$

Macro:ParserErrorsHeader
$

Macro:ParserErrorsTail
$

Macro:ParserErrorIndexHeader
$

Macro:ParserErrorIndexTail
$

Macro:ParserTail

}

$

Macro:TokenIndexHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import $1$.*;
import $2$.*;
import asf.astgraph.Token;

class TokenIndex
{
    public Token makeToken(int tokenId) {
    	switch (tokenId) {

$

Macro:TokenIndexBody
	case $1$:
		return new $0$();

$

Macro:TokenIndexTail
		default:
			throw new RuntimeException("Not a token ID: " + tokenId);
		}
	}
}

$

Macro:ParserException
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import $1$.*;

@SuppressWarnings("serial")
public class ParserException extends Exception
{
    Token token;

    public ParserException(@SuppressWarnings("hiding") Token token, String  message)
    {
        super(message);
        this.token = token;
    }

    public Token getToken()
    {
        return this.token;
    }
}

$

Macro:State
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.ArrayList;

final class State
{
    int state;
    ArrayList nodes;

    State(@SuppressWarnings("hiding") int state, @SuppressWarnings("hiding") ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

$
